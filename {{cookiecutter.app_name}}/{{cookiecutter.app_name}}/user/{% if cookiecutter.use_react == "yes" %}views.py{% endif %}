from oauthlib.oauth2 import InvalidGrantError
from flask import Blueprint, request, redirect, render_template, session, \
    abort, url_for, current_app, send_from_directory, jsonify

from .models import Merchant
from ..utils import login_required, decode_jwt, get_oauth_session
from ..extensions import fulfil, oauth_user

blueprint = Blueprint('user', __name__)


@blueprint.route('/')
@login_required
def home():
    return send_from_directory("static", "react/dist/index.html")


@blueprint.route('/user')
@login_required
def user_details():
    return jsonify(**oauth_user.serialize)


@blueprint.route('/login')
def login():
    subdomain = None
    if request.args.get('merchant'):
        subdomain = request.args.get('merchant')
    else:
        subdomain = request.args.get('subdomain')

    if subdomain:
        access_type = 'user_access'
        if not Merchant.get_by_subdomain(subdomain):
            access_type = 'offline_access'

        session['subdomain'] = subdomain
        oauth_session = get_oauth_session()
        authorization_url, state = oauth_session.create_authorization_url(
            redirect_uri=url_for(
                '.authorized',
                next=request.args.get('next'),
                _external=True
            ),
            scope=current_app.config['FULFIL_PERMISSIONS'],
            access_type=access_type
        )
        session['oauth_state'] = state
        return redirect(authorization_url)
    return render_template('login.html')


@blueprint.route('/authorized')
def authorized():
    state = request.args.get('state')
    oauth_state = session.pop('oauth_state', None)
    if not oauth_state or oauth_state != state:
        # Verify if state is there in session
        abort(401)

    code = request.args.get('code')
    payload = decode_jwt(code)
    oauth_session = get_oauth_session(scope=payload['scope'])
    try:
        token = oauth_session.get_token(code=code)
    except InvalidGrantError:
        # Send user to home page which ask for login again.
        return redirect(url_for('user.home'))
    if not token:
        abort(400)
    if token.get('offline_access_token'):
        merchant = Merchant.create_or_update(
            session['subdomain'],
            token['offline_access_token'],
            payload['organization_id'],
        )

    session['fulfil'] = {
        'user': token['associated_user'],
        'oauth_token': token,
        'subdomain': session['subdomain']
    }

    if token.get('offline_access_token'):
        company_id = fulfil.context['company']
        Company = fulfil.model('company.company')
        current_company, = Company.read([company_id], ['timezone'])

        merchant.company_fid = company_id
        merchant.timezone = current_company['timezone']
        merchant.save()

    Access = fulfil.model('ir.model.access')
    models = set()
    permissions = set()
    for p in current_app.config['FULFIL_PERMISSIONS']:
        model, action = p.split(':')
        models.add(model)
        permissions.add((model, action))

    access_map = Access.get_access(list(models))
    for model, action in list(permissions):
        if not access_map[model][action]:
            logout()
            return render_template("login_permission_error.html"), 401

    return redirect(request.args.get('next') or url_for('user.home'))


@blueprint.route('/logout')
def logout():
    session.pop('fulfil', None)
    session.pop('session_id', None)
    session.pop('context', None)
    return redirect(url_for('user.home'))
